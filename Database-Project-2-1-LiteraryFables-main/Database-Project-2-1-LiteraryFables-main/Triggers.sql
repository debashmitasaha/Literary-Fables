CREATE OR REPLACE TRIGGER UPDATE_USAGE_DAYS
AFTER UPDATE
OF USAGE_DAYS
ON CUSTOMER
FOR EACH ROW
DECLARE
	U_ID NUMBER(5);
	N_REMAINING_DAYS NUMBER(5);
	L_FEE NUMBER(5);
	B_ID NUMBER(5);
	B_COUNT NUMBER(5);
BEGIN
	U_ID := :OLD.USER_ID;
	
	FOR R IN (SELECT ROUND(((B.START_TIME + L.BORROW_DAY_LIMIT) - SYSDATE),0) AS NEW_REMAINING_DAYS, B.BORROW_ID AS BORROW_ID FROM BORROW B JOIN LIBRARY_CARD L ON (B.USER_ID = L.USER_ID AND B.LIBRARY_ID = L.LIBRARY_ID) WHERE B.USER_ID = U_ID)
	LOOP
		N_REMAINING_DAYS := R.NEW_REMAINING_DAYS;
		B_ID := R.BORROW_ID;
		
		IF N_REMAINING_DAYS < 0 THEN
			L_FEE := N_REMAINING_DAYS * (-1) * 50;
		ELSE
			L_FEE := 0;
		END IF;
		
		UPDATE BORROW SET DAYS_REMAINING = N_REMAINING_DAYS,LATE_FEE = L_FEE WHERE BORROW_ID = B_ID;
	END LOOP;
END;




CREATE OR REPLACE TRIGGER INSERT_INTO_BORROW
BEFORE INSERT
ON BORROW
FOR EACH ROW
DECLARE
	N_NUM_COPIES NUMBER(5);
	N_BOOK_ID NUMBER(5);
	N_LIBRARY_ID NUMBER(5);
	B_NUM_COPIES NUMBER(5);
	DAILY_LIM NUMBER(5);
	PREV_BORROWED NUMBER(5);
	N_USER_ID NUMBER(5);
BEGIN
	N_NUM_COPIES := :NEW.NUMBER_OF_COPIES;
	N_BOOK_ID := :NEW.BOOK_ID;
	N_LIBRARY_ID := :NEW.LIBRARY_ID;
	N_USER_ID := :NEW.USER_ID;
	
	SELECT NUMBER_OF_COPIES INTO B_NUM_COPIES FROM BORROWABLE_LIBRARY_BOOKS WHERE LIBRARY_BOOK_ID = N_BOOK_ID AND LIBRARY_ID = N_LIBRARY_ID;
	
	SELECT SUM(NUMBER_OF_COPIES) INTO PREV_BORROWED FROM BORROW WHERE USER_ID = N_USER_ID AND TRUNC(START_TIME,'DAY') = TRUNC(SYSDATE,'DAY');
	SELECT BORROW_NUM_LIMIT INTO DAILY_LIM FROM LIBRARY_CARD WHERE LIBRARY_ID = N_LIBRARY_ID AND USER_ID = N_USER_ID; 
	
	IF B_NUM_COPIES < N_NUM_COPIES THEN
		RAISE_APPLICATION_ERROR(100,'TOO MANY COPIES');
	ELSIF (DAILY_LIM - PREV_BORROWED) < N_NUM_COPIES THEN
		RAISE_APPLICATION_ERROR(200,'DAILY LIMIT EXCEEDED');
	ELSE
		UPDATE BORROWABLE_LIBRARY_BOOKS SET NUMBER_OF_COPIES = NUMBER_OF_COPIES - N_NUM_COPIES WHERE LIBRARY_BOOK_ID = N_BOOK_ID AND LIBRARY_ID = N_LIBRARY_ID;
	END IF;
END;

CREATE OR REPLACE TRIGGER BOOKSHOP_ACCEPTS_OFFER
BEFORE UPDATE
OF STATUS
ON EXCHANGE
FOR EACH ROW
DECLARE
	EXCH_BOOK_ID NUMBER(5);
	RET_BOOK_ID NUMBER(5);
	U_ID NUMBER(5);
	B_ID NUMBER(5);
	S_ID NUMBER(5);
	COPY_NUM NUMBER(5);
	PRICE NUMBER(5);
	LAT_ID NUMBER(5);
BEGIN
	EXCH_BOOK_ID := :OLD.EXCHANGED_BOOK_ID;
	RET_BOOK_ID := :OLD.RETURNED_BOOK_ID;
	U_ID := :OLD.USER_ID;
	S_ID := :OLD.SHOP_ID;
	
	
	SELECT SHOP_BOOK_ID INTO B_ID FROM BUYABLE_SHOP_BOOKS WHERE PUBLISHED_BOOK_ID = RET_BOOK_ID;
	SELECT SELLING_PRICE INTO PRICE FROM BUYABLE_SHOP_BOOKS WHERE PUBLISHED_BOOK_ID = RET_BOOK_ID;
	
	UPDATE USER_COLLECTION SET COPIES = COPIES - 1 WHERE USER_ID = U_ID AND BOOK_ID = B_ID;
	SELECT COPIES INTO COPY_NUM FROM USER_COLLECTION WHERE USER_ID = U_ID AND BOOK_ID = EXCH_BOOK_ID;
	IF COPY_NUM > 0 THEN
		UPDATE USER_COLLECTION SET COPIES = COPIES + 1 WHERE USER_ID = U_ID AND BOOK_ID = EXCH_BOOK_ID;
	ELSE
		INSERT INTO USER_COLLECTION VALUES(U_ID,EXCH_BOOK_ID,1);
	END IF;
	
	UPDATE BUYABLE_SHOP_BOOKS SET NUMBER_OF_COPIES = NUMBER_OF_COPIES - 1 WHERE SHOP_BOOK_ID = EXCH_BOOK_ID;
	SELECT NUMBER_OF_COPIES INTO COPY_NUM FROM BUYABLE_SHOP_BOOKS WHERE SHOP_ID = S_ID AND SHOP_BOOK_ID = B_ID;
	IF COPY_NUM > 0 THEN
		UPDATE BUYABLE_SHOP_BOOKS SET NUMBER_OF_COPIES = NUMBER_OF_COPIES + 1 WHERE SHOP_ID = S_ID AND SHOP_BOOK_ID = B_ID;
	ELSE
		SELECT MAX(SHOP_BOOK_ID) INTO LAT_ID FROM BUYABLE_SHOP_BOOKS;
		INSERT INTO BUYABLE_SHOP_BOOKS VALUES(LAT_ID + 1,PRICE,S_ID,RET_BOOK_ID,1);
	END IF;

END;



CREATE OR REPLACE TRIGGER UPDATE_CART_BOOKS
BEFORE UPDATE
ON CART_BOOKS
FOR EACH ROW
DECLARE
	S_ID NUMBER(5);
	COPIES_IN_SHOP NUMBER(5);
	COPIES_IN_CART NUMBER(5);
	C_ID NUMBER(5);
	B_ID NUMBER(5);
BEGIN
	COPIES_IN_CART := :NEW.NUMBER_OF_COPIES;
	C_ID := :OLD.CART_ID;
	B_ID := :OLD.BOOK_ID;
	
	SELECT SHOP_ID INTO S_ID FROM CART WHERE CART_ID = C_ID;
	SELECT NUMBER_OF_COPIES INTO COPIES_IN_SHOP FROM BUYABLE_SHOP_BOOKS WHERE SHOP_ID = S_ID AND SHOP_BOOK_ID = B_ID;
	
	IF COPIES_IN_SHOP < COPIES_IN_CART THEN
		DBMS_OUTPUT.PUT_LINE('ERROR HERE');
		RAISE_APPLICATION_ERROR(-2000,'NOT ENOUGH COPIES');
	END IF;
END;




CREATE OR REPLACE TRIGGER UPDATE_BORROW
AFTER UPDATE
OF RETURN_TIME
ON BORROW
FOR EACH ROW
DECLARE
	OLD_NUM_COPIES NUMBER(5);
	OLD_BOOK_ID NUMBER(5);
	OLD_LIBRARY_ID NUMBER(5);
	B_NUM_COPIES NUMBER(5);
BEGIN
	OLD_NUM_COPIES := :OLD.NUMBER_OF_COPIES;
	OLD_BOOK_ID := :OLD.BOOK_ID;
	OLD_LIBRARY_ID := :OLD.LIBRARY_ID;
	
	DBMS_OUTPUT.PUT_LINE(OLD_NUM_COPIES);
	
	UPDATE BORROWABLE_LIBRARY_BOOKS SET NUMBER_OF_COPIES = OLD_NUM_COPIES WHERE LIBRARY_ID = OLD_LIBRARY_ID AND LIBRARY_BOOK_ID = OLD_BOOK_ID; 
	
END;




CREATE OR REPLACE TRIGGER UNIQUE_ISBN
BEFORE INSERT
ON PUBLISHED_BOOKS
FOR EACH ROW
DECLARE
	new_isbn NUMBER;
	i NUMBER ;
BEGIN
	new_isbn := :NEW.ISBN;
	i :=0;
	FOR R IN (SELECT ISBN FROM PUBLISHED_BOOKS WHERE ISBN = new_isbn)
	LOOP
		i := i+1;
	END LOOP;
	
	IF i>0 THEN 
		RAISE_APPLICATION_ERROR(1000,'ISBN SHOULD BE UNIQUE');
	END IF;
END;




CREATE OR REPLACE TRIGGER INSERT_INTO_SUCCESSFUL_EXCHANGE
AFTER UPDATE
OF STATUS
ON EXCHANGE
FOR EACH ROW 

DECLARE
	update_status VARCHAR2(50);
	S_ID  NUMBER;
	U_ID NUMBER;
	OFFER_BOOK_ID NUMBER;
	EXCHANGE_BOOK_ID NUMBER;
	is_exchanged NUMBER :=0;
	
BEGIN
	update_status := UPPER(:NEW.STATUS) ;
	S_ID := :NEW.EXCHANGE_ID;
	U_ID := :NEW.USER_ID;
	OFFER_BOOK_ID := :NEW.RETURNED_BOOK_ID;
	EXCHANGE_BOOK_ID := :NEW.EXCHANGED_BOOK_ID ;
	
	IF update_status = 'ACCEPTED' THEN 
		INSERT INTO SUCCESSFUL_EXCHANGE VALUES (S_ID,U_ID,OFFER_BOOK_ID,EXCHANGE_BOOK_ID,is_exchanged );
		
	END IF;
END;


CREATE OR REPLACE TRIGGER INSERT_USER
BEFORE INSERT 
ON CUSTOMER
FOR EACH ROW
DECLARE
	username VARCHAR2(100);
BEGIN
	username := UPPER(:NEW.NAME) ;
	:NEW.NAME := username;
	
END;


CREATE OR REPLACE TRIGGER INSERT_PUBLISHER
BEFORE INSERT 
ON PUBLISHER
FOR EACH ROW
DECLARE
	name VARCHAR2(100);
BEGIN
	name := UPPER(:NEW.NAME) ;
	:NEW.NAME := name;
	
END;

