
CREATE OR REPLACE PROCEDURE UPDATING_COLLECTION IS
	C_ID NUMBER(5);
	U_ID NUMBER(5);
	B_ID NUMBER(5);
	N_COPIES NUMBER(5);
BEGIN
	FOR R IN (SELECT * FROM CART_BOOKS)
	LOOP
		SELECT USER_ID INTO U_ID FROM CART WHERE CART_ID = R.CART_ID;
		SELECT COPIES INTO N_COPIES FROM USER_COLLECTION WHERE USER_ID = U_ID AND BOOK_ID = R.BOOK_ID;
	IF N_COPIES > 0 THEN
		UPDATE USER_COLLECTION SET COPIES = COPIES + R.NUMBER_OF_COPIES WHERE USER_ID = U_ID AND BOOK_ID = R.BOOK_ID;
	ELSE
		INSERT INTO USER_COLLECTION VALUES(U_ID,R.BOOK_ID,N_COPIES);
	END IF; 
	END LOOP;
END;

CREATE OR REPLACE FUNCTION GENERATE_DISCOUNT(C_ID NUMBER)
RETURN NUMBER
AS
	DISCOUNT_PERCENTAGE NUMBER(5);
	DISCOUNT NUMBER(5);
	CL NUMBER(5);
	TC NUMBER(5);
	U_ID NUMBER(5);
	S_ID NUMBER(5);
BEGIN
	SELECT USER_ID INTO U_ID FROM CART WHERE CART_ID = C_ID;
	SELECT SHOP_ID INTO S_ID FROM CART WHERE CART_ID = C_ID;
	SELECT TOTAL_COST INTO TC FROM CART WHERE USER_ID = U_ID AND SHOP_ID = S_ID; 
  SELECT CARD_LEVEL INTO CL FROM GIFT_CARD WHERE USER_ID = U_ID AND SHOP_ID = S_ID;
	DISCOUNT_PERCENTAGE := CL * 5;
	
	DISCOUNT := (TC * DISCOUNT_PERCENTAGE) / 100;
	RETURN DISCOUNT;
END;

CREATE OR REPLACE FUNCTION IS_MEMBER(USERID NUMBER, LIBRARYID NUMBER)
RETURN VARCHAR2
AS
	IS_MEM VARCHAR2(50);
	MEMBER_STATUS VARCHAR2(50);
BEGIN
  SELECT STATUS INTO MEMBER_STATUS FROM MEMBERSHIP_APPLICATION WHERE USER_ID = USERID AND LIBRARY_ID = LIBRARYID ;
	IF MEMBER_STATUS = 'Accepted' THEN
		IS_MEM := 'YES';
	ELSE 
		IS_MEM := 'NO';
	END IF;
	RETURN IS_MEM;
END;

CREATE OR REPLACE PROCEDURE SUB_RELATED_UPDATES(U_ID IN NUMBER,SUB_TYPE IN VARCHAR2) IS
	BORROW_LIM NUMBER(5);
	L_FEE_RATE NUMBER(5);
	EXCHANGE_LIM NUMBER(5);
	DISC_PER_LEVEL NUMBER(5);
BEGIN
	IF SUB_TYPE = 'FREE' THEN
		BORROW_LIM := 10;
		L_FEE_RATE := 75;
		EXCHANGE_LIM := 5;
		DISC_PER_LEVEL := 5;
	ELSIF SUB_TYPE = 'PRO' THEN
		BORROW_LIM := 20;
		L_FEE_RATE := 50;
		EXCHANGE_LIM := 10;
		DISC_PER_LEVEL := 7;
	ELSIF SUB_TYPE = 'ULTIMATE' THEN
		BORROW_LIM := 40;
		L_FEE_RATE := 25;
		EXCHANGE_LIM := 15;
		DISC_PER_LEVEL := 10;
	END IF;
	
	UPDATE GIFT_CARD SET DISCOUNT_PER_LEVEL = DISC_PER_LEVEL WHERE USER_ID = U_ID;
	UPDATE CUSTOMER SET EXCHANGE_LIMIT = EXCHANGE_LIM WHERE USER_ID = U_ID;
	UPDATE LIBRARY_CARD SET BORROW_NUM_LIMIT = BORROW_LIM, LATE_FEE_RATE = L_FEE_RATE WHERE USER_ID = U_ID;
	
END;

CREATE OR REPLACE FUNCTION NO_REVIEW(B_ID IN NUMBER)
RETURN VARCHAR2
AS
	NULL_COUNT NUMBER(5);
	TOTAL_COUNT NUMBER(5);
	NO_REVIEW VARCHAR2(50);
BEGIN
  SELECT COUNT(*) INTO NULL_COUNT FROM SHOP_BOOK_REVIEW WHERE REVIEW_BODY IS NULL;
	SELECT COUNT(*) INTO TOTAL_COUNT FROM SHOP_BOOK_REVIEW;
	
	IF NULL_COUNT = TOTAL_COUNT THEN
		NO_REVIEW := 'True';
	ELSE
		NO_REVIEW := 'False';
	END IF;
	
	RETURN NO_REVIEW;
END;

CREATE OR REPLACE PROCEDURE REMOVE_FROM_CART(C_ID IN NUMBER,B_ID IN NUMBER) IS
	TOTAL_PRICE NUMBER(5);
BEGIN
	SELECT (C.NUMBER_OF_COPIES * B.SELLING_PRICE) INTO TOTAL_PRICE FROM CART_BOOKS C JOIN BUYABLE_SHOP_BOOKS B ON (C.BOOK_ID = B.SHOP_BOOK_ID) WHERE C.BOOK_ID = B_ID;
	
	DELETE FROM CART_BOOKS WHERE CART_ID = C_ID AND BOOK_ID = B_ID;
	UPDATE CART SET TOTAL_COST = TOTAL_COST - TOTAL_PRICE WHERE CART_ID = C_ID;
END;
